plugins {
    id "java"
    id "idea"
    id "org.jetbrains.kotlin.jvm"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.yuugiri.fluiditygradle"
}

repositories {
    mavenLocal()
    maven {
        url = "https://mccheatz.github.io/maven_repo/"
        content {
            includeGroupByRegex "me\\.yuugiri.*"
            includeGroupByRegex "org\\.jetbrains\\.compose.*"
            includeGroupByRegex "org\\.jetbrains\\.skiko.*"
            includeGroupByRegex "io\\.material.*"
        }
    }
    mavenCentral()
}

group = "me.liuli.fluidity"
archivesBaseName = "Fluidity"

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

configurations {
    include
    implementation.extendsFrom(include)
}

String targetOs = "linux"
if (System.getProperty("os.name").startsWith("Win")) {
    targetOs = "windows"
} else if (System.getProperty("os.name") == "Mac OS X") {
    targetOs = "macos"
}
String targetArch = "x64"
if (System.getProperty("os.arch") == "aarch64") {
    targetArch = "arm64"
}

dependencies {
    include('me.yuugiri.hutil:hook-utility:792e21c') {
        exclude group: 'org.ow2.asm'
    }

    implementation MinecraftDependencyKt.minecraftDep(project, "core/src/main/resources/fluidity_at.cfg")

    include (project(":core")) {
        exclude module: "minecraftbin"
        exclude group: "org.ow2.asm"
    }
    include (project(":gui")) {
        exclude module: "minecraftbin"
        exclude group: "org.ow2.asm"
        exclude module: "skiko-awt-runtime-$targetOs-$targetArch"
    }

    include fileTree(include: ["*.jar"], dir: "libs")
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"
    exclude "META-INF/*.kotlin_module"
    exclude "META-INF/**/*.pro"
    exclude "LICENSE.txt"
    exclude "**/module-info.class"
    exclude "**/package-info.class"
    exclude "**/*.kotlin_metadata"
    exclude "**/*.kotlin_builtins"

    manifest {
        attributes["FMLCorePlugin"] = "me.liuli.fluidity.inject.FMLLoadingPlugin"
        attributes["FMLCorePluginContainsFMLMod"] = "true"
        attributes["ModSide"] = "CLIENT"
    }
}

genIntelliJRuns {
    vmParams = "-Dfml.coreMods.load=me.liuli.fluidity.inject.FMLLoadingPlugin"
}

classes.dependsOn(putObfMap)
reobfJarWithStrip.dependsOn(shadowJar)
tasks.getByName("build").dependsOn(reobfJarWithStrip)